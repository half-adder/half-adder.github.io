---
layout: post
title: "Secret Management"
---

Managing secrets is a tricky problem. Managing them conveniently is an even tricker one. One of my first projects at my new job was to come up with a better system than the one that was in place.

In the beginning, there was EncryptedConfig
===========================================

The system as it was before I started was set up like so. All secrets are stored in an encrypted file, let's call it ```enc-secrets.cfg```. The structure of this file is such that python's built-in [ConfigParser](https://docs.python.org/2/library/configparser.html) will be able to read it. Here's a simple example of such a file:

    [jira]
    base_url = https://www.jira.bigcorp.com
    username = secops
    password = hunter2

    [postgresql]
    conn_string = 'host=pg01.bigcorp.com user=secops pass=correcthorsebatterystaple'

We then had a python module, which opens `enc-secrets.cfg` and delegates method calls to a ConfigParser object it has as an attribute.

This is actually pretty convenient for a few reasons.

1. It lets us check our configuration into source control without worrying about it being compromised. 

2. It allows for very simple dev/prod configuration distinctions. Instead of there being a `[postgresql-dev]` and `[postgresql-prod]` section in the config file (which would mean that we would need dev/prod logic in the actual code), we can have *two* configuration files, `enc-secrets-dev.cfg` and `enc-secrets-master.cfg`. Then we just create a symlink `enc-secrets.cfg -> enc-secrets-dev.cfg` on our dev machine and the respective symlink in prod! Cool!

So this system This worked well enough... Except it didn't. Any code which relied on this `EncryptedConfigParser` needed the decryption password before it ran. So every time you ran tests, started a local version of our internal webapp, or ran any other tool that required this encrypted configuration, you had to enter your the password at the terminal...

    $ python webapp.py
    Decryption Password: 

    webapp started
    ...

Obviously, this was a giant pain. The password is relatively complex, and it is generally annoying to type it every time you want to do anything. But there was an even bigger problem...

A coworker had written a script that needed to be called at regular intervals. 

Fixing the giant pain
=====================


